@import url('https://fonts.googleapis.com/css?family=Montserrat:900&display=swap');


/* =============================================================================
                                  <header>
============================================================================= */


header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color: rgba(0,0,0,0.7);
  border-bottom: 0.5px solid #61DAFB;
  z-index: 2;
}

.fixed-header {
  transition: transform 0.25s linear;
}

[data-scrolldir="up"] .fixed-header   { transform: translateY(0%);    }
[data-scrolldir="down"] .fixed-header { transform: translateY(-100%); }


.fancy-h1 {
  margin: 0;
  padding: 0;
  color: snow;
  text-align: center;
  font-size: 5vw;
  font-family: Montserrat;
  letter-spacing: 3px;
  line-height: 1.5;
  -webkit-text-stroke-width: 1.5px;
  -webkit-text-stroke-color: #61DAFB;
  text-shadow: -5px 5px 5px rgba(0,0,0,0.35);
}

.fancy-h2 {
  color: snow;
  font-size: 4vw;
  font-family: Montserrat;
  letter-spacing: 1px;
  -webkit-text-stroke-width: 1px;
  -webkit-text-stroke-color: violet;
  text-shadow: -2px 2px 4px rgba(0,0,0,0.15);
  white-space: nowrap;
}


/* =============================================================================
                                  main
============================================================================= */


/* The background gradient is applied to main::after and NOT body::after because
we have to also use overflow: hidden;
Doing this on body would prevent scrolling. */
main {
  position: relative;
  top: 0;
  left: 0;
  /* min-height: 100%; */
  min-height: 1200px; /* See note in script.js for why this is done. */
  width: 100%;
  padding: 150px 0 100px 0;
  overflow: hidden;
}


/* =============================================================================
                       CPU Issues with the animation
================================================================================


The original example was animating background-position:

          https://codepen.io/P1N2O/pen/pyBNzX


The problem with this is that animating background-position causes repaints.
And that ends up being a nightmare on the CPU.
The end result was that it made the sticky navigation glitch out,
which is somewhat misleading because that's not really where the problem was
originating from.

This was not solved by using good old GPU hacks on .fixed-header:

    transform: translate3d(0, 0, 0);
    will-change: transform;


Nor was it solved by using these on the element with the background gradient (originally main):

    transform: translate3d(0, 0, 0);
    will-change: background-position;


There are a lot of articles suggesting these approaches:

    https://github.com/twbs/bootstrap/issues/18832
    https://www.youtube.com/watch?v=2vFrZXWiwIc
    https://stackoverflow.com/questions/13176746/css-keyframe-animation-cpu-usage-is-high-should-it-be-this-way
    http://ariya.blogspot.com/2011/07/fluid-animation-with-accelerated.html
    https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/
    https://dev.opera.com/articles/css-will-change-property/
    https://css-tricks.com/forums/topic/animated-background-eating-up-cpu/
    https://coderwall.com/p/ka0low/don-t-mix-position-fixed-with-css-transforms
    https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12699983/
    https://webdesign.tutsplus.com/tutorials/css3-animations-the-hiccups-and-bugs-youll-want-to-avoid--webdesign-4867


In the end, the solution was to use transform instead, and this is the best article I found:

    https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/
    "Transforms are the best properties to animate because the GPU can assist with the heavy lifting."


================================================================================

============================================================================= */


main::after {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  height: 400%;
  width: 400%;
  content: '';
  background: linear-gradient(-45deg, #23d5ab, #23a6d5, #e73c7e, #ee7752);
}

main.animate::after {
  animation:         gradient_background 20s linear 5s infinite;
  -webkit-animation: gradient_background 20s linear 5s infinite;
}


/* ============================
    animation keyframes
============================ */
/* This works in IOS Safari. However, if in split view and you click on a filter button
it breaks the background animation.
I don't think this is a huge problem, and I'm not going to take the time to figure out
precisely what's going on in Isotope. */

@keyframes gradient_background  {
  /* https://css-tricks.com/debugging-css-keyframe-animations/ */
  50% { transform: translate(-75%, -75%) }
}

/* https://www.quackit.com/css/properties/webkit/css_-webkit-transform.cfm */
@-webkit-keyframes gradient_background  {
  50%  { -webkit-transform: translate(-75%, -75%); }
}
